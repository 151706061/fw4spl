<plugin id="Tuto04SignalSlot" version="@DASH_VERSION@">

    <requirement id="dataReg" />
    <requirement id="servicesReg" />
    <requirement id="visuVTKQt" />


    <extension implements="::fwServices::registry::AppConfig">
        <id>tutoSignalSlotConfig</id>
        <config>

            <!-- The main data object is ::fwData::Mesh. -->
            <object type="::fwData::Mesh">

                <service uid="myFrame" impl="::gui::frame::SDefaultFrame">
                    <gui>
                        <frame>
                            <name>tutoSignalSlot</name>
                            <icon>@BUNDLE_PREFIX@/Tuto04SignalSlot_0-1/tuto.ico</icon>
                            <minSize width="720" height="600" />
                        </frame>
                        <menuBar />
                    </gui>
                    <registry>
                        <menuBar sid="myMenuBar" start="yes" />
                        <view sid="myDefaultView" start="yes" />
                    </registry>
                </service>

                <service uid="myMenuBar" impl="::gui::aspect::SDefaultMenuBar">
                    <gui>
                        <layout>
                            <menu name="File" />
                        </layout>
                    </gui>
                    <registry>
                        <menu sid="myMenuFile" start="yes" />
                    </registry>
                </service>

                <!--
                    Default view service:
                    This service defines the view layout. The type '::fwGui::CardinalLayoutManager' represents a main
                    central view and other views at the 'right', 'left', 'bottom' or 'top'.
                    Here the application contains a central view at the right.

                    Each <view> declared into the <layout> tag, must have its associated <view> into the <registry> tag.
                    A minimum window height and a width are given to the two non-central views.
                -->
                <service uid="myDefaultView" impl="::gui::view::SDefaultView">
                    <gui>
                        <layout type="::fwGui::CardinalLayoutManager">
                            <view caption="Rendering 1" align="center" />
                            <view caption="Rendering 2" align="right" minWidth="400" minHeight="100" />
                            <view caption="Rendering 3" align="right" minWidth="400" minHeight="100" />
                        </layout>
                    </gui>
                    <registry>
                        <view sid="myRendering1" start="yes" />
                        <view sid="myRendering2" start="yes" />
                        <view sid="myRendering3" start="yes" />
                    </registry>
                </service>

                <service uid="myMenuFile" impl="::gui::aspect::SDefaultMenu">
                    <gui>
                        <layout>
                            <menuItem name="Open file" shortcut="Ctrl+O" />
                            <separator />
                            <menuItem name="Quit" specialAction="QUIT" shortcut="Ctrl+Q" />
                        </layout>
                    </gui>
                    <registry>
                        <menuItem sid="actionOpenFile" start="yes" />
                        <menuItem sid="actionQuit" start="yes" />
                    </registry>
                </service>

                <service uid="actionOpenFile" impl="::gui::action::SStarter">
                    <start uid="myReaderPathFile" />
                </service>

                <service uid="actionQuit" impl="::gui::action::SQuit" type="::fwGui::IActionSrv" />

                <service uid="myReaderPathFile" impl="::uiIO::editor::SIOSelector">
                    <type mode="reader" /><!-- mode is optional (by default it is "reader") -->
                </service>

                <!--
                    Visualization services:
                    We have three rendering service representing a 3D scene displaying the loaded mesh. The scene are
                    shown in the windows defines in 'view' service.
                -->
                <service uid="myRendering1" impl="::vtkSimpleMesh::SRenderer" autoConnect="yes" />
                <service uid="myRendering2" impl="::vtkSimpleMesh::SRenderer" autoConnect="yes" />
                <service uid="myRendering3" impl="::vtkSimpleMesh::SRenderer" autoConnect="yes" />

                <!--
                    Each 3D scene owns a 3D camera that can be moved by the user on clicking in the scene.
                    - When the camera moved, a signal 'camUpdated' is emitted with the new camera information (position,
                    focal, view up).
                    - To update the camera without clicking, you could called the slot 'updateCamPosition'

                    Here, we connect each rendering service signal 'camUpdated' to the others service slot
                    'updateCamPosition', so the cameras are synchronized in each scene.
                -->
                <connect>
                    <signal>myRendering1/camUpdated</signal>
                    <slot>myRendering2/updateCamPosition</slot>
                    <slot>myRendering3/updateCamPosition</slot>
                </connect>

                <connect>
                    <signal>myRendering2/camUpdated</signal>
                    <slot>myRendering1/updateCamPosition</slot>
                    <slot>myRendering3/updateCamPosition</slot>
                </connect>

                <connect>
                    <signal>myRendering3/camUpdated</signal>
                    <slot>myRendering2/updateCamPosition</slot>
                    <slot>myRendering1/updateCamPosition</slot>
                </connect>

                <start uid="myFrame" />
            </object>

        </config>
    </extension>

</plugin>
