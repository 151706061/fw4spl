<!--
    This tutorial explains how to perform matrix transformation using the generic scene.

    To use this application, you need to load a mesh.
-->
<plugin id="Tuto10MatrixTransformInGS" version="@DASH_VERSION@">

    <requirement id="dataReg" />
    <requirement id="servicesReg" />
    <requirement id="visuVTKQt" />
    <requirement id="maths" />

    <extension implements="::fwServices::registry::AppConfig2">
        <id>Tuto10MatrixTransformInGS</id>
        <config>
            <!-- ***************************************** Begin Objects declaration ***************************************** -->
            <object uid="matrixA" type="::fwData::TransformationMatrix3D">
                <matrix>
                <![CDATA[
                        1 0 0 2
                        0 1 0 0
                        0 0 1 0
                        0 0 0 1
                ]]>
                </matrix>
            </object>

            <object uid="matrixB" type="::fwData::TransformationMatrix3D">
                <matrix>
                <![CDATA[
                    1 0 0 4
                    0 1 0 0
                    0 0 1 0
                    0 0 0 1
                ]]>
                </matrix>
            </object>

            <object uid="matrixC" type="::fwData::TransformationMatrix3D">
                <matrix>
                <![CDATA[
                    1 0 0 0
                    0 1 0 0
                    0 0 1 2
                    0 0 0 1
                ]]>
                </matrix>
            </object>

            <object uid="matrixD" type="::fwData::TransformationMatrix3D">
                <matrix>
                <![CDATA[
                    0.75 0    0    0
                    0    0.75 0    0
                    0    0    0.75 0
                    0    0    0    1
                ]]>
                </matrix>
            </object>

            <object uid="matrixE" type="::fwData::TransformationMatrix3D" />
            <object uid="rotationMatrix1" type="::fwData::TransformationMatrix3D" />
            <object uid="rotationMatrix2" type="::fwData::TransformationMatrix3D" />
            <object uid="rotationMatrix3" type="::fwData::TransformationMatrix3D" />

            <object uid="mesh" type="::fwData::Mesh" />
            <!-- ***************************************** End Objects declaration ******************************************* -->

            <!-- ***************************************** Begin layouts declaration ***************************************** -->
            <service uid="mainFrame" type="::gui::frame::SDefaultFrame">
                <gui>
                    <frame>
                        <name>Tuto10MatrixTransformInGS</name>
                        <icon>@BUNDLE_PREFIX@/Tuto10MatrixTransformInGS_0-1/tuto.ico</icon>
                        <minSize width="800" height="600" />
                    </frame>
                    <menuBar />
                </gui>
                <registry>
                    <menuBar sid="menuBar" start="yes" />
                    <view sid="mainView" start="yes" />
                </registry>
            </service>

            <service uid="menuBar" type="::gui::aspect::SDefaultMenuBar">
                <gui>
                    <layout>
                        <menu name="File" />
                    </layout>
                </gui>
                <registry>
                    <menu sid="menuFile" start="yes" />
                </registry>
            </service>

            <service uid="menuFile" type="::gui::aspect::SDefaultMenu">
                <gui>
                    <layout>
                        <menuItem name="OpenFile" shortcut="Ctrl+O" />
                        <separator />
                        <menuItem name="Quit" shortcut="Ctrl+Q" specialAction="QUIT" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="actionOpenFile" start="yes" />
                    <menuItem sid="actionQuit" start="yes" />
                </registry>
            </service>

            <service uid="actionOpenFile" type="::gui::action::SStarter">
                <start uid="readerPathFile" />
            </service>

            <service uid="actionQuit" type="::gui::action::SQuit" />

            <service uid="mainView" type="::gui::view::SDefaultView">
                <gui>
                    <layout type="::fwGui::CardinalLayoutManager">
                        <view align="center" />
                        <view align="bottom" minHeight="40" position="0" />
                    </layout>
                </gui>
                <registry>
                    <view sid="genericScene" start="yes" />
                    <view sid="matrixEditor" start="yes" />
                </registry>
            </service>
            <!-- ***************************************** End layouts declaration ***************************************** -->

            <!-- ***************************************** Begin services declarations  ************************************ -->

            <service uid="matrixEditor" type="::uiVisu::TransformationMatrixEditor" >
                <inout key="matrix" uid="matrixE" />
            </service>

            <service uid="readerPathFile" type="::uiIO::editor::SIOSelector" >
                <inout key="target" uid="mesh" />
                <type mode="reader" />
            </service>

            <!--
                Declare the rotationMatrix1 as the concatenation of matrixE, matrixA and matrixD
                rotationMatrix1 = matrixE x matrixA x matrixD
                autoConnect is needed to automatically update the concatenation
            -->
            <service uid="concat1" type="::maths::SConcatenateMatrices">
                <in group="matrix">
                    <key uid="matrixE" autoConnect="yes" />
                    <key uid="matrixA" />
                    <key uid="matrixD" />
                </in>
                <inout key="output" uid="rotationMatrix1" />
            </service>

            <!-- rotationMatrix2 = matrixE x matrixB x matrixE x matrixE x matrixE x matrixD x matrixD -->
            <service uid="concat2" type="::maths::SConcatenateMatrices">
                <in group="matrix">
                    <key uid="matrixE" inverse="true" autoConnect="yes" />
                    <key uid="matrixB" />
                    <key uid="matrixE" />
                    <key uid="matrixE" />
                    <key uid="matrixE" />
                    <key uid="matrixD" />
                    <key uid="matrixD" />
                </in>
                <inout key="output" uid="rotationMatrix2" />
            </service>

            <!-- rotationMatrix3 = matrixC x matrixE x matrixD x matrixD x matrixD -->
            <service uid="concat3" type="::maths::SConcatenateMatrices">
                <in group="matrix">
                    <key uid="matrixC" />
                    <key uid="matrixE" autoConnect="yes" />
                    <key uid="matrixD" />
                    <key uid="matrixD" />
                    <key uid="matrixD" />
                </in>
                <inout key="output" uid="rotationMatrix3" />
            </service>

            <!-- ***************************************** Begin render scenes declarations  ***************************************** -->
                <!--
                    Generic scene:
                    This scene shows four times the same mesh but with a different matrix. It manages multiples transformation matrices.
                -->
                <service uid="genericScene" type="::fwRenderVTK::SRender" autoConnect="yes">
                    <in key="mesh" uid="mesh" />
                    <in key="rotationMatrix1" uid="rotationMatrix1" />
                    <in key="rotationMatrix2" uid="rotationMatrix2" />
                    <in key="rotationMatrix3" uid="rotationMatrix3" />

                    <scene renderMode="auto">
                        <picker id="picker" vtkclass="fwVtkCellPicker" />

                        <renderer id="default" background="#052833" />

                        <!-- Declare the vtk transform to use (it is optional) -->
                        <vtkObject id="rotationMatrixID1" class="vtkTransform" />
                        <vtkObject id="rotationMatrixID2" class="vtkTransform" />
                        <vtkObject id="rotationMatrixID3" class="vtkTransform" />

                        <!--
                            Defines transform adaptors:
                            This adaptor works on a ::fwData::TransformationMatrix3D and manages a vtkTransform. When
                            the ::fwData::TransformationMatrix3D is modified, it updates the vtkTransform, and vice
                            versa.
                        -->
                        <adaptor id="matrixAdaptor1" class="::visuVTKAdaptor::Transform" objectId="rotationMatrix1">
                            <config renderer="default" picker="" transform="rotationMatrixID1" />
                        </adaptor>

                        <adaptor id="matrixAdaptor2" class="::visuVTKAdaptor::Transform" objectId="rotationMatrix2">
                            <config renderer="default" picker="" transform="rotationMatrixID2" />
                        </adaptor>

                        <adaptor id="matrixAdaptor3" class="::visuVTKAdaptor::Transform" objectId="rotationMatrix3">
                            <config renderer="default" picker="" transform="rotationMatrixID3" />
                        </adaptor>

                        <adaptor id="TMAdaptor1" class="::visuVTKAdaptor::Mesh" objectId="mesh">
                            <config renderer="default" picker="" />
                        </adaptor>

                        <adaptor id="TMAdaptor2" class="::visuVTKAdaptor::Mesh" objectId="mesh">
                            <config renderer="default" picker="" transform="rotationMatrixID1" />
                        </adaptor>

                        <adaptor id="TMAdaptor3" class="::visuVTKAdaptor::Mesh" objectId="mesh">
                            <config renderer="default" picker="" transform="rotationMatrixID2" />
                        </adaptor>

                        <adaptor id="TMAdaptor4" class="::visuVTKAdaptor::Mesh" objectId="mesh">
                            <config renderer="default" picker="" transform="rotationMatrixID3" />
                        </adaptor>

                    </scene>
                </service>
                <!-- ***************************************** End render scenes declaration ***************************************** -->

                <!-- ***************************************** End services declarations  ************************************************ -->

                <start uid="mainFrame" />
                <start uid="concat1" />
                <start uid="concat2" />
                <start uid="concat3" />

                <update uid="concat1" />
                <update uid="concat2" />
                <update uid="concat3" />

        </config>
    </extension>
</plugin>
