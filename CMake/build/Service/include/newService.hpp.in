#ifndef __@BUNDLE_NAME_UPPER@_@SERVICE_NAME_UPPER@_HPP__
#define __@BUNDLE_NAME_UPPER@_@SERVICE_NAME_UPPER@_HPP__

#include "@BUNDLE_NAME@/config.hpp"

#include <@SUPERCLASS_NAMESPACE_INCLUDE@/@SUPERCLASS@.hpp>

namespace @BUNDLE_NAME@
{

/**
 * @brief   Description of the class.
 * @class   @SERVICE_NAME@
 */
class @BUNDLE_NAME_UPPER@_CLASS_API @SERVICE_NAME@ : public ::@SUPERCLASS_NAMESPACE@::@SUPERCLASS@
{

public:

    fwCoreServiceClassDefinitionsMacro ( (@SERVICE_NAME@)(::@SUPERCLASS_NAMESPACE@::@SUPERCLASS@) );

    /// Constructor.
    @BUNDLE_NAME_UPPER@_API @SERVICE_NAME@() throw();

    /// Destructor. Does nothing
    @BUNDLE_NAME_UPPER@_API virtual ~@SERVICE_NAME@() throw();

protected:

    /**
     * @brief method description:
     * @verbatim
        <service uid="@SERVICE_NAME@Instance" impl="::@BUNDLE_NAME@::@SERVICE_NAME@" type="::@SUPERCLASS_NAMESPACE@::@SUPERCLASS@">
             <parameter>param</parameter>
        </service>
       @endverbatim
     * - \b Parameter : parameter description.
     */
    @BUNDLE_NAME_UPPER@_API virtual void configuring()  throw ( ::fwTools::Failed );

    /// FILL ME.
    @BUNDLE_NAME_UPPER@_API virtual void starting()  throw ( ::fwTools::Failed );

    /// FILL ME.
    @BUNDLE_NAME_UPPER@_API virtual void stopping()  throw ( ::fwTools::Failed );

    /// FILL ME.
    @BUNDLE_NAME_UPPER@_API virtual void updating() throw ( ::fwTools::Failed );

};

} // @BUNDLE_NAME@

#endif // __@BUNDLE_NAME_UPPER@_@SERVICE_NAME_UPPER@_HPP__
