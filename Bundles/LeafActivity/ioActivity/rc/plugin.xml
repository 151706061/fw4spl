<plugin id="ioActivity" version="@DASH_VERSION@">

    <requirement id="io" />
    <requirement id="uiIO" />
    <requirement id="media" />
    <requirement id="filterVRRender" />

    <!-- Activity used to export an image series. -->
    <extension implements="::fwActivities::registry::Activities">
        <id>ImageSeriesExport</id>
        <title>ImageSeries Export</title>
        <desc>Activity to export the selected ImageSeries.</desc>
        <icon>NONE</icon>
        <requirements>
            <requirement name="series" type="::fwMedData::ImageSeries" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>::fwActivities::builder::ActivitySeries</builder>
        <appConfig id="ExportSelection">
            <parameters>
                <parameter replace="selection" by="@values.series" />
            </parameters>
        </appConfig>
    </extension>

    <!-- Activity used to export a model series. -->
    <extension implements="::fwActivities::registry::Activities">
        <id>ModelSeriesExport</id>
        <title>ModelSeries Export</title>
        <desc>Activity to export the selected ModelSeries.</desc>
        <icon>NONE</icon>
        <requirements>
            <requirement name="series" type="::fwMedData::ModelSeries" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>::fwActivities::builder::ActivitySeries</builder>
        <appConfig id="ExportSelection">
            <parameters>
                <parameter replace="selection" by="@values.series" />
            </parameters>
        </appConfig>
    </extension>

    <!-- App config used to export the selected series. -->
    <extension implements="::fwServices::registry::AppConfig">
        <id>ExportSelection</id>
        <parameters>
            <param name="GENERIC_UID" />
            <param name="selection" />
        </parameters>
        <config>
            <object uid="${selection}" src="ref">
                <service uid="${GENERIC_UID}_export_selection" impl="::uiIO::editor::SIOSelector" autoConnect="yes">
                    <type mode="writer" />
                    <selection mode="exclude" />
                    <addSelection service="::ioAtoms::SWriter" />
                </service>
                <start uid="${GENERIC_UID}_export_selection" />
                <update uid="${GENERIC_UID}_export_selection" />
            </object>
        </config>
    </extension>

    <!-- Service config used to read SeriesDB without using ioAtoms. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>SDBReaderIOSelectorConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>IOSelectorService config for SeriesDB reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="exclude" />
            <addSelection service="::ioAtoms::SReader" />
        </config>
    </extension>

    <!-- Service config used to read seriesDB using ioAtoms. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>SDBAtomsReaderIOSelectorConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>Atoms seriesDB reader.</desc>
        <config>
            <type mode="reader" />
            <selection mode="include" />
            <addSelection service="::ioAtoms::SReader" />
            <config id="MDAtomsConfig" service="::ioAtoms::SReader" />
        </config>
    </extension>
    
    <!-- Service config used to read SeriesDB with all the available reader for SeriesDB. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>FullSDBReaderIOSelectorConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>IOSelectorService config for SeriesDB reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="exclude" />
            <config id="MDAtomsConfig" service="::ioAtoms::SReader" />
        </config>
    </extension>

    <!-- Service config used for ioAtoms reader and writer. Defines the Data version and filter to use. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>MDAtomsConfig</id>
        <desc>Reader/Writer for atoms representing a medical data</desc>
        <config>
            <patcher context="MedicalData" version="V09ALA" />
            <filter>VRRenderMedicalDataV2</filter>
        </config>
    </extension>

</plugin>
